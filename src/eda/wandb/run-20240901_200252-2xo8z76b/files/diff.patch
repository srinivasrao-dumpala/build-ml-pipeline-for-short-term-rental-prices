diff --git a/conda.yml b/conda.yml
index a1363a2..c90c3f0 100644
--- a/conda.yml
+++ b/conda.yml
@@ -10,3 +10,4 @@ dependencies:
   - pip:
       - mlflow==2.8.1
       - wandb==0.16.0
+      - ydata-profiling==4.1.1
diff --git a/config.yaml b/config.yaml
index 933ec1f..b4e7c63 100644
--- a/config.yaml
+++ b/config.yaml
@@ -20,7 +20,7 @@ modeling:
   random_seed: 42
   # Column to use for stratification (use "none" for no stratification)
   stratify_by: "neighbourhood_group"
-  # Maximum number of features to consider for the TFIDF applied to the title of the
+  # Maximum number of features to consider for th e TFIDF applied to the title of the
   # insertion (the column called "name")
   max_tfidf_features: 5
   # NOTE: you can put here any parameter that is accepted by the constructor of
diff --git a/environment.yml b/environment.yml
index 2ab326c..ad595ae 100644
--- a/environment.yml
+++ b/environment.yml
@@ -4,11 +4,15 @@ channels:
   - defaults
 dependencies:
   - python=3.10
+  - ipython=7.12.0
+  - mlflow==2.8.1
   - hydra-core=1.3.2
   - matplotlib=3.8.2
   - pandas=2.1.3
   - jupyterlab=4.0.9
   - pip=23.3.1
+  - hydra-core=1.0.6
   - pip:
       - mlflow==2.8.1
-      - wandb==0.16.0
\ No newline at end of file
+      - wandb==0.16.0
+      - ydata-profiling
\ No newline at end of file
diff --git a/main.py b/main.py
index 27a89b1..37f62ab 100644
--- a/main.py
+++ b/main.py
@@ -36,7 +36,7 @@ def go(config: DictConfig):
     with tempfile.TemporaryDirectory() as tmp_dir:
 
         if "download" in active_steps:
-            # Download file and load in W&B
+            #  CLI : mlfow run . -P steps="download"
             _ = mlflow.run(
                 f"{config['main']['components_repository']}/get_data",
                 "main",
@@ -50,22 +50,48 @@ def go(config: DictConfig):
             )
 
         if "basic_cleaning" in active_steps:
-            ##################
-            # Implement here #
-            ##################
-            pass
+            # CLI : mlfow run . -P steps="basic_cleaning"
+            _ = mlflow.run(
+                os.path.join(hydra.utils.get_original_cwd(), "src" , "basic_cleaning"),
+                "main",
+                parameters={
+                    "input_artifact":"sample.csv:latest",
+                    "output_artifact":"clean_sample.csv",
+                    "output_type":"clean_sample Data",
+                    "output_description":" Bsaic Cleaning from sample data",
+                    "min_price":config['etl']['min_price'],
+                    "max_price":config['etl']['max_price']
+                },
+            )
 
         if "data_check" in active_steps:
-            ##################
-            # Implement here #
-            ##################
-            pass
+            # CLI : mlfow run . -P steps="data_check"
+            _ = mlflow.run(
+                os.path.join(hydra.utils.get_original_cwd(), "src" , "data_check"),
+                "main",
+                parameters={
+                    "input_artifact":"clean_sample.csv:latest",
+                    "output_artifact":"clean_sample.csv:reference",
+                    "output_type":"clean_sample",
+                    "kl_threshold":config['data_check']['kl_threshold'],
+                    "min_price":config['etl']['min_price'],
+                    "max_price":config['etl']['max_price']    
+                },
+            )
 
         if "data_split" in active_steps:
-            ##################
-            # Implement here #
-            ##################
-            pass
+            # CLI : mlfow run . -P steps="data_split"
+            _ = mlflow.run(
+                f"{config['main']['components_repository']}/train_val_test_split",
+                "main",
+                version='main',
+                parameters={
+                    "input":"clean_sample.csv:latest",
+                    "config":config['modeling']['test_size'],
+                    "random_seed":config['modeling']['random_seed'],
+                    "stratify_by":config['modeling']['stratify_by']
+                }
+            )
 
         if "train_random_forest" in active_steps:
 
@@ -76,21 +102,33 @@ def go(config: DictConfig):
 
             # NOTE: use the rf_config we just created as the rf_config parameter for the train_random_forest
             # step
-
-            ##################
-            # Implement here #
-            ##################
-
-            pass
+            # mlflow run . -P steps="train_random_forest"
+            # mlflow run . -P hydra_options="modeling.max_tfidf_features10,15,30 modeling.random_forest.max_feature=0.1,0.33,0.5,0.75,1.0 -m"
+            _ = mlflow.run(
+                os.path.join(hydra.utils.get_original_cwd(), "src" , "train_random_forest"),
+                "main",
+                parameters= {
+                    "val_size":config['modeling']['val_size'],
+                    "random_seed":config['modeling']['random_seed'],
+                    "stratify_by":config['modeling']['stratify_by'],
+                    "max_tfidf_features":config['modeling']['max_tfidf_features'],
+                    "rf_config" : rf_config,
+                    "train_val_artifact":"trainval_data.csv:latest",
+                    "output_artifact":"random_forest_export"
+                }
+            )
 
         if "test_regression_model" in active_steps:
-
-            ##################
-            # Implement here #
-            ##################
-
-            pass
-
+            # CLI : mlflow run . -P steps=test_regression_model
+            _ = mlflow.run(
+                f"{config['main']['components_repository']}/test_regression_model",
+                "main",
+                version='main',
+                parameters = {
+                    "mlflow_model":"random_forest_export:prod",
+                    "test_dataset":"test_data.csv:latest"
+                }
+            )
 
 if __name__ == "__main__":
     go()
diff --git a/src/data_check/test_data.py b/src/data_check/test_data.py
index 6ed3ec6..6067022 100644
--- a/src/data_check/test_data.py
+++ b/src/data_check/test_data.py
@@ -63,3 +63,32 @@ def test_similar_neigh_distrib(data: pd.DataFrame, ref_data: pd.DataFrame, kl_th
 ########################################################
 # Implement here test_row_count and test_price_range   #
 ########################################################
+def test_row_count(data:pd.DataFrame):
+    """
+    Check the input Dataframe count with in range 
+
+    Parameters:
+       data (pd.DataFrame) : Input DataFrame
+
+    Returns : 
+        None
+    
+    Throws AssertionError
+    """
+
+    assert 15000 < data.shape[0] < 1000000
+
+def test_price_range(data:pd.DataFrame, min_price:float, max_price: float):
+    """
+    Verifies the input DataFrame price feature with in given range
+
+    Parameters:
+        data(pd.DataFrame): Input Pandas DataFrame
+        min_pirce (Float): Minimum price to be allowed 
+        max_price(Float): Maximum Price to be allowed
+    
+    Returns : None
+    Throws AssertionError 
+    """
+    range_condition = (data['price'] >=  min_price) & (data['price'] <= max_price)
+    assert range_condition.all()
diff --git a/src/eda/conda.yml b/src/eda/conda.yml
index 3bca34f..5d816fa 100644
--- a/src/eda/conda.yml
+++ b/src/eda/conda.yml
@@ -6,6 +6,7 @@ dependencies:
   - python=3.10
   - hydra-core=1.3.2
   - matplotlib=3.8.2
+  - seaborn=0.11.1
   - pandas=2.1.3
   - pip=23.3.1
   - scikit-learn=1.3.2
@@ -13,3 +14,4 @@ dependencies:
   - pip:
       - mlflow==2.8.1
       - wandb==0.16.0
+      - ydata-profiling==4.1.1
