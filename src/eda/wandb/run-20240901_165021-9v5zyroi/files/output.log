<class 'pandas.core.frame.DataFrame'>
RangeIndex: 20000 entries, 0 to 19999
Data columns (total 16 columns):
 #   Column                          Non-Null Count  Dtype
---  ------                          --------------  -----
 0   id                              20000 non-null  int64
 1   name                            19993 non-null  object
 2   host_id                         20000 non-null  int64
 3   host_name                       19992 non-null  object
 4   neighbourhood_group             20000 non-null  object
 5   neighbourhood                   20000 non-null  object
 6   latitude                        20000 non-null  float64
 7   longitude                       20000 non-null  float64
 8   room_type                       20000 non-null  object
 9   price                           20000 non-null  int64
 10  minimum_nights                  20000 non-null  int64
 11  number_of_reviews               20000 non-null  int64
 12  last_review                     15877 non-null  object
 13  reviews_per_month               15877 non-null  float64
 14  calculated_host_listings_count  20000 non-null  int64
 15  availability_365                20000 non-null  int64
dtypes: float64(3), int64(7), object(6)
memory usage: 2.4+ MB
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 20000 entries, 0 to 19999
Data columns (total 16 columns):
 #   Column                          Non-Null Count  Dtype
---  ------                          --------------  -----
 0   id                              20000 non-null  int64
 1   name                            19993 non-null  object
 2   host_id                         20000 non-null  int64
 3   host_name                       19992 non-null  object
 4   neighbourhood_group             20000 non-null  object
 5   neighbourhood                   20000 non-null  object
 6   latitude                        20000 non-null  float64
 7   longitude                       20000 non-null  float64
 8   room_type                       20000 non-null  object
 9   price                           20000 non-null  int64
 10  minimum_nights                  20000 non-null  int64
 11  number_of_reviews               20000 non-null  int64
 12  last_review                     15877 non-null  object
 13  reviews_per_month               15877 non-null  float64
 14  calculated_host_listings_count  20000 non-null  int64
 15  availability_365                20000 non-null  int64
dtypes: float64(3), int64(7), object(6)
memory usage: 2.4+ MB
Traceback (most recent call last):
  File "/var/folders/lv/7pqqcf_s36x401_s8kbz5zz40000gn/T/ipykernel_3498/3381786808.py", line 13, in <module>
    search.fit(X, y)
  File "/Users/swathilakhinana/miniconda3/envs/nyc_airbnb_dev/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/Users/swathilakhinana/miniconda3/envs/nyc_airbnb_dev/lib/python3.10/site-packages/sklearn/model_selection/_search.py", line 1018, in fit
    self._run_search(evaluate_candidates)
  File "/Users/swathilakhinana/miniconda3/envs/nyc_airbnb_dev/lib/python3.10/site-packages/sklearn/model_selection/_search.py", line 1572, in _run_search
    evaluate_candidates(ParameterGrid(self.param_grid))
  File "/Users/swathilakhinana/miniconda3/envs/nyc_airbnb_dev/lib/python3.10/site-packages/sklearn/model_selection/_search.py", line 964, in evaluate_candidates
    out = parallel(
  File "/Users/swathilakhinana/miniconda3/envs/nyc_airbnb_dev/lib/python3.10/site-packages/sklearn/utils/parallel.py", line 74, in __call__
    return super().__call__(iterable_with_config)
  File "/Users/swathilakhinana/miniconda3/envs/nyc_airbnb_dev/lib/python3.10/site-packages/joblib/parallel.py", line 1918, in __call__
    return output if self.return_generator else list(output)
  File "/Users/swathilakhinana/miniconda3/envs/nyc_airbnb_dev/lib/python3.10/site-packages/joblib/parallel.py", line 1847, in _get_sequential_output
    res = func(*args, **kwargs)
  File "/Users/swathilakhinana/miniconda3/envs/nyc_airbnb_dev/lib/python3.10/site-packages/sklearn/utils/parallel.py", line 136, in __call__
    return self.function(*args, **kwargs)
  File "/Users/swathilakhinana/miniconda3/envs/nyc_airbnb_dev/lib/python3.10/site-packages/sklearn/model_selection/_validation.py", line 876, in _fit_and_score
    estimator = estimator.set_params(**clone(parameters, safe=False))
  File "/Users/swathilakhinana/miniconda3/envs/nyc_airbnb_dev/lib/python3.10/site-packages/sklearn/pipeline.py", line 237, in set_params
    self._set_params("steps", **kwargs)
  File "/Users/swathilakhinana/miniconda3/envs/nyc_airbnb_dev/lib/python3.10/site-packages/sklearn/utils/metaestimators.py", line 69, in _set_params
    super().set_params(**params)
  File "/Users/swathilakhinana/miniconda3/envs/nyc_airbnb_dev/lib/python3.10/site-packages/sklearn/base.py", line 279, in set_params
    raise ValueError(
ValueError: Invalid parameter 'classifier' for estimator Pipeline(steps=[('preprocessor',
                 ColumnTransformer(transformers=[('ordinal_cat',
                                                  OrdinalEncoder(),
                                                  ['room_type']),
                                                 ('non_ordinal_cat',
                                                  Pipeline(steps=[('simpleimputer',
                                                                   SimpleImputer(strategy='most_frequent')),
                                                                  ('onehotencoder',
                                                                   OneHotEncoder())]),
                                                  ['neighbourhood_group']),
                                                 ('impute_zero',
                                                  SimpleImputer(fill_value=0,
                                                                strategy='constant'),
                                                  ['latitude', 'longitude...
                                                                                 strategy='constant')),
                                                                  ('functiontransformer',
                                                                   FunctionTransformer(func=<function reshape at 0x1142f8b70>,
                                                                                       kw_args={'new_shape': -1})),
                                                                  ('tfidfvectorizer',
                                                                   TfidfVectorizer(max_features=5,
                                                                                   stop_words='english'))]),
                                                  ['name'])])),
                ('regressor',
                 RandomForestRegressor(max_depth=15, max_features=0.5,
                                       min_samples_leaf=3, min_samples_split=4,
                                       n_jobs=-1, oob_score=True,
                                       random_state=42))]). Valid parameters are: ['memory', 'steps', 'verbose'].